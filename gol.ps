/arg {exch def} def

/arrayy [[0 0 0 1 0]
         [0 0 0 1 0]
         [0 1 0 1 0]] def


/drawsquare {
	4 dict begin

	/rgb arg
    /size arg
    /y arg
    /x arg

    newpath
    x y moveto
    size 0 rlineto
    0 size rlineto
    size neg 0 rlineto
    closepath
    
    rgb aload pop
    setrgbcolor
    
    fill

    end
} def

/convertXY {
    0 dict begin
    
    /size arg
    /numberRows arg
    /column arg
    /row arg

    column size mul  % x
    numberRows 1 sub row sub size mul %y
    
    end
} def

/draw-board
{
    /size arg
	/arr arg
    /rgb 0 def
    
    0 1 2 { 
        /row arg
			
        0 1 4 {
            /column arg

            arr row get column get 1 eq 
            {
                /rgb [1.0 0.7 0.0] def
            }
            {
                /rgb [0 0 1] def
            } ifelse

            row column arr length size convertXY size rgb drawsquare
        } for
    } for
} def

/assert-are-equal {
	0 dict begin
    /observed arg
    /expected arg
    
    observed type /arraytype eq
    expected type /arraytype eq and {
      observed length expected length not {
        (bad length) == done
      } if
      0 1 observed length 1 sub {
      	observed i get expected get i assert-are-equal
      } for
	} {
    	observed type expected type eq not
        observed expected eq not or {
        	(fail) == done
        } if
    } ifelse
    
    end
}

%arrayy 50 draw-board

1 1 assert-are-equal